{"version":3,"file":"arrayTools.js","sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/arrayTools.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\n\r\nimport type { Observable } from \"./observable\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/** @hidden */\r\ninterface TupleTypes<T> {\r\n    2: [T, T];\r\n    3: [T, T, T];\r\n    4: [T, T, T, T];\r\n    5: [T, T, T, T, T];\r\n    6: [T, T, T, T, T, T];\r\n    7: [T, T, T, T, T, T, T];\r\n    8: [T, T, T, T, T, T, T, T];\r\n    9: [T, T, T, T, T, T, T, T, T];\r\n    10: [T, T, T, T, T, T, T, T, T, T];\r\n    11: [T, T, T, T, T, T, T, T, T, T, T];\r\n    12: [T, T, T, T, T, T, T, T, T, T, T, T];\r\n    13: [T, T, T, T, T, T, T, T, T, T, T, T, T];\r\n    14: [T, T, T, T, T, T, T, T, T, T, T, T, T, T];\r\n    15: [T, T, T, T, T, T, T, T, T, T, T, T, T, T, T];\r\n}\r\n\r\nexport interface INotifyArrayChangeType<T> {\r\n    target: Nullable<Array<T>>;\r\n    previousLength?: number; // If the array was previously null/undefined, this will be undefined\r\n}\r\n\r\n/**\r\n * Class containing a set of static utilities functions for arrays.\r\n */\r\nexport class ArrayTools {\r\n    /**\r\n     * Returns an array of the given size filled with elements built from the given constructor and the parameters.\r\n     * @param size the number of element to construct and put in the array.\r\n     * @param itemBuilder a callback responsible for creating new instance of item. Called once per array entry.\r\n     * @returns a new array filled with new objects.\r\n     */\r\n    public static BuildArray<T>(size: number, itemBuilder: () => T): Array<T> {\r\n        const a: T[] = [];\r\n        for (let i = 0; i < size; ++i) {\r\n            a.push(itemBuilder());\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * Returns a tuple of the given size filled with elements built from the given constructor and the parameters.\r\n     * @param size he number of element to construct and put in the tuple.\r\n     * @param itemBuilder a callback responsible for creating new instance of item. Called once per tuple entry.\r\n     * @returns a new tuple filled with new objects.\r\n     */\r\n    public static BuildTuple<T, N extends keyof TupleTypes<unknown>>(size: N, itemBuilder: () => T): TupleTypes<T>[N] {\r\n        return ArrayTools.BuildArray(size, itemBuilder) as any;\r\n    }\r\n\r\n    private static _ProxySet<T>(observable: Observable<INotifyArrayChangeType<T>>, target: Array<T>, property: string | symbol, value: T): boolean {\r\n        observable.notifyObservers({ target, previousLength: target.length });\r\n        return Reflect.set(target, property, value);\r\n    }\r\n\r\n    private static _ProxyPushOrUnshift<T>(operation: \"push\" | \"unshift\", observable: Observable<INotifyArrayChangeType<T>>, target: Array<T>, ...values: Array<T>): number {\r\n        observable.notifyObservers({ target, previousLength: target.length });\r\n        return operation === \"push\" ? Array.prototype.push.apply(target, values) : Array.prototype.unshift.apply(target, values);\r\n    }\r\n\r\n    private static _ProxyDelete<T>(observable: Observable<INotifyArrayChangeType<T>>, target: Array<T>, property: string | symbol) {\r\n        observable.notifyObservers({ target, previousLength: target.length });\r\n        return Reflect.deleteProperty(target, property);\r\n    }\r\n\r\n    private static _ProxyPopOrShift<T>(operation: \"pop\" | \"shift\", observable: Observable<INotifyArrayChangeType<T>>, target: Array<T>) {\r\n        const value = operation === \"pop\" ? Array.prototype.pop.apply(target) : Array.prototype.shift.apply(target);\r\n        observable.notifyObservers({ target, previousLength: target.length });\r\n        return value;\r\n    }\r\n\r\n    private static _ProxySplice<T>(observable: Observable<INotifyArrayChangeType<T>>, target: Array<T>, start: number, deleteNumber: number, ...added: Array<T>) {\r\n        const values = Array.prototype.splice.apply(target, [start, deleteNumber, added]);\r\n        observable.notifyObservers({ target, previousLength: target.length });\r\n        return values;\r\n    }\r\n\r\n    public static MakeObservableArray<T>(observable: Observable<INotifyArrayChangeType<T>>, initialArray: Nullable<Array<T>>) {\r\n        let returnObject;\r\n        if (initialArray && !Object.prototype.hasOwnProperty.call(initialArray, \"isObserved\")) {\r\n            const _proxyObject = {\r\n                set: (target: Array<T>, property: string | symbol, value: T) => ArrayTools._ProxySet(observable, target, property, value),\r\n                push: (target: Array<T>, ...values: Array<T>) => ArrayTools._ProxyPushOrUnshift(\"push\", observable, target, ...values),\r\n                unshift: (target: Array<T>, ...values: Array<T>) => ArrayTools._ProxyPushOrUnshift(\"unshift\", observable, target, ...values),\r\n                delete: (target: Array<T>, property: string | symbol) => ArrayTools._ProxyDelete(observable, target, property),\r\n                pop: (target: Array<T>) => ArrayTools._ProxyPopOrShift(\"pop\", observable, target),\r\n                shift: (target: Array<T>) => ArrayTools._ProxyPopOrShift(\"shift\", observable, target),\r\n                splice: (target: Array<T>, start: number, deleteNumber: number, ...added: Array<T>) => ArrayTools._ProxySplice(observable, target, start, deleteNumber, ...added),\r\n                isObserved: true,\r\n            };\r\n\r\n            returnObject = new Proxy(initialArray, _proxyObject);\r\n        } else {\r\n            returnObject = initialArray;\r\n        }\r\n        observable.notifyObservers({ target: returnObject });\r\n        return returnObject;\r\n    }\r\n}\r\n"]}